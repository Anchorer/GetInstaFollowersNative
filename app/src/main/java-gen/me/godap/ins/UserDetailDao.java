package me.godap.ins;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_DETAIL".
*/
public class UserDetailDao extends AbstractDao<UserDetail, Long> {

    public static final String TABLENAME = "USER_DETAIL";

    /**
     * Properties of entity UserDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserId = new Property(0, Long.class, "userId", true, "USER_ID");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property FullName = new Property(2, String.class, "fullName", false, "FULL_NAME");
        public final static Property ExternalUrl = new Property(3, String.class, "externalUrl", false, "EXTERNAL_URL");
        public final static Property IsFavorite = new Property(4, Boolean.class, "isFavorite", false, "IS_FAVORITE");
        public final static Property PublicPhoneCountryCode = new Property(5, String.class, "publicPhoneCountryCode", false, "PUBLIC_PHONE_COUNTRY_CODE");
        public final static Property PublicPhone = new Property(6, String.class, "publicPhone", false, "PUBLIC_PHONE");
        public final static Property PublicEmail = new Property(7, String.class, "publicEmail", false, "PUBLIC_EMAIL");
        public final static Property GeoMediaCount = new Property(8, Integer.class, "geoMediaCount", false, "GEO_MEDIA_COUNT");
        public final static Property UserTagsCount = new Property(9, Integer.class, "userTagsCount", false, "USER_TAGS_COUNT");
        public final static Property AvatarUrl = new Property(10, String.class, "avatarUrl", false, "AVATAR_URL");
        public final static Property AddressStreet = new Property(11, String.class, "addressStreet", false, "ADDRESS_STREET");
        public final static Property CityName = new Property(12, String.class, "cityName", false, "CITY_NAME");
        public final static Property FollowerCount = new Property(13, Integer.class, "followerCount", false, "FOLLOWER_COUNT");
        public final static Property FollowingCount = new Property(14, Integer.class, "followingCount", false, "FOLLOWING_COUNT");
    }


    public UserDetailDao(DaoConfig config) {
        super(config);
    }
    
    public UserDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_DETAIL\" (" + //
                "\"USER_ID\" INTEGER PRIMARY KEY ," + // 0: userId
                "\"USER_NAME\" TEXT," + // 1: userName
                "\"FULL_NAME\" TEXT," + // 2: fullName
                "\"EXTERNAL_URL\" TEXT," + // 3: externalUrl
                "\"IS_FAVORITE\" INTEGER," + // 4: isFavorite
                "\"PUBLIC_PHONE_COUNTRY_CODE\" TEXT," + // 5: publicPhoneCountryCode
                "\"PUBLIC_PHONE\" TEXT," + // 6: publicPhone
                "\"PUBLIC_EMAIL\" TEXT," + // 7: publicEmail
                "\"GEO_MEDIA_COUNT\" INTEGER," + // 8: geoMediaCount
                "\"USER_TAGS_COUNT\" INTEGER," + // 9: userTagsCount
                "\"AVATAR_URL\" TEXT," + // 10: avatarUrl
                "\"ADDRESS_STREET\" TEXT," + // 11: addressStreet
                "\"CITY_NAME\" TEXT," + // 12: cityName
                "\"FOLLOWER_COUNT\" INTEGER," + // 13: followerCount
                "\"FOLLOWING_COUNT\" INTEGER);"); // 14: followingCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_DETAIL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserDetail entity) {
        stmt.clearBindings();
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(1, userId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String fullName = entity.getFullName();
        if (fullName != null) {
            stmt.bindString(3, fullName);
        }
 
        String externalUrl = entity.getExternalUrl();
        if (externalUrl != null) {
            stmt.bindString(4, externalUrl);
        }
 
        Boolean isFavorite = entity.getIsFavorite();
        if (isFavorite != null) {
            stmt.bindLong(5, isFavorite ? 1L: 0L);
        }
 
        String publicPhoneCountryCode = entity.getPublicPhoneCountryCode();
        if (publicPhoneCountryCode != null) {
            stmt.bindString(6, publicPhoneCountryCode);
        }
 
        String publicPhone = entity.getPublicPhone();
        if (publicPhone != null) {
            stmt.bindString(7, publicPhone);
        }
 
        String publicEmail = entity.getPublicEmail();
        if (publicEmail != null) {
            stmt.bindString(8, publicEmail);
        }
 
        Integer geoMediaCount = entity.getGeoMediaCount();
        if (geoMediaCount != null) {
            stmt.bindLong(9, geoMediaCount);
        }
 
        Integer userTagsCount = entity.getUserTagsCount();
        if (userTagsCount != null) {
            stmt.bindLong(10, userTagsCount);
        }
 
        String avatarUrl = entity.getAvatarUrl();
        if (avatarUrl != null) {
            stmt.bindString(11, avatarUrl);
        }
 
        String addressStreet = entity.getAddressStreet();
        if (addressStreet != null) {
            stmt.bindString(12, addressStreet);
        }
 
        String cityName = entity.getCityName();
        if (cityName != null) {
            stmt.bindString(13, cityName);
        }
 
        Integer followerCount = entity.getFollowerCount();
        if (followerCount != null) {
            stmt.bindLong(14, followerCount);
        }
 
        Integer followingCount = entity.getFollowingCount();
        if (followingCount != null) {
            stmt.bindLong(15, followingCount);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserDetail entity) {
        stmt.clearBindings();
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(1, userId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String fullName = entity.getFullName();
        if (fullName != null) {
            stmt.bindString(3, fullName);
        }
 
        String externalUrl = entity.getExternalUrl();
        if (externalUrl != null) {
            stmt.bindString(4, externalUrl);
        }
 
        Boolean isFavorite = entity.getIsFavorite();
        if (isFavorite != null) {
            stmt.bindLong(5, isFavorite ? 1L: 0L);
        }
 
        String publicPhoneCountryCode = entity.getPublicPhoneCountryCode();
        if (publicPhoneCountryCode != null) {
            stmt.bindString(6, publicPhoneCountryCode);
        }
 
        String publicPhone = entity.getPublicPhone();
        if (publicPhone != null) {
            stmt.bindString(7, publicPhone);
        }
 
        String publicEmail = entity.getPublicEmail();
        if (publicEmail != null) {
            stmt.bindString(8, publicEmail);
        }
 
        Integer geoMediaCount = entity.getGeoMediaCount();
        if (geoMediaCount != null) {
            stmt.bindLong(9, geoMediaCount);
        }
 
        Integer userTagsCount = entity.getUserTagsCount();
        if (userTagsCount != null) {
            stmt.bindLong(10, userTagsCount);
        }
 
        String avatarUrl = entity.getAvatarUrl();
        if (avatarUrl != null) {
            stmt.bindString(11, avatarUrl);
        }
 
        String addressStreet = entity.getAddressStreet();
        if (addressStreet != null) {
            stmt.bindString(12, addressStreet);
        }
 
        String cityName = entity.getCityName();
        if (cityName != null) {
            stmt.bindString(13, cityName);
        }
 
        Integer followerCount = entity.getFollowerCount();
        if (followerCount != null) {
            stmt.bindLong(14, followerCount);
        }
 
        Integer followingCount = entity.getFollowingCount();
        if (followingCount != null) {
            stmt.bindLong(15, followingCount);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserDetail readEntity(Cursor cursor, int offset) {
        UserDetail entity = new UserDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fullName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // externalUrl
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // isFavorite
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // publicPhoneCountryCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // publicPhone
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // publicEmail
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // geoMediaCount
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // userTagsCount
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // avatarUrl
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // addressStreet
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // cityName
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // followerCount
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14) // followingCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserDetail entity, int offset) {
        entity.setUserId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFullName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setExternalUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsFavorite(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setPublicPhoneCountryCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPublicPhone(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPublicEmail(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setGeoMediaCount(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setUserTagsCount(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setAvatarUrl(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAddressStreet(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCityName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setFollowerCount(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setFollowingCount(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserDetail entity, long rowId) {
        entity.setUserId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserDetail entity) {
        if(entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserDetail entity) {
        return entity.getUserId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
